//
// Generated file, do not edit! Created by opp_msgtool 6.0 from request.msg.
//

#ifndef __FATTREE_REQUEST_M_H
#define __FATTREE_REQUEST_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace fattree {

class Request;

}  // namespace fattree


namespace fattree {

/**
 * Class generated from <tt>request.msg:18</tt> by opp_msgtool.
 * <pre>
 * packet Request
 * {
 *     char work_type;
 *     short port_index;
 *     int64_t data_size;
 *     string src_addr;
 *     string des_addr;
 *     string next_hop_addr;
 *     simtime_t generate_time;
 *     simtime_t arriveModule_time;
 *     simtime_t leaveModule_time;
 *     //omnetpp::cPacket pkg;
 * }
 * </pre>
 */
class Request : public ::omnetpp::cPacket
{
  protected:
    char work_type = 0;
    short port_index = 0;
    int64_t data_size = 0;
    ::omnetpp::opp_string src_addr;
    ::omnetpp::opp_string des_addr;
    ::omnetpp::opp_string next_hop_addr;
    ::omnetpp::simtime_t generate_time = SIMTIME_ZERO;
    ::omnetpp::simtime_t arriveModule_time = SIMTIME_ZERO;
    ::omnetpp::simtime_t leaveModule_time = SIMTIME_ZERO;

  private:
    void copy(const Request& other);

  protected:
    bool operator==(const Request&) = delete;

  public:
    Request(const char *name=nullptr, short kind=0);
    Request(const Request& other);
    virtual ~Request();
    Request& operator=(const Request& other);
    virtual Request *dup() const override {return new Request(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual char getWork_type() const;
    virtual void setWork_type(char work_type);

    virtual short getPort_index() const;
    virtual void setPort_index(short port_index);

    virtual int64_t getData_size() const;
    virtual void setData_size(int64_t data_size);

    virtual const char * getSrc_addr() const;
    virtual void setSrc_addr(const char * src_addr);

    virtual const char * getDes_addr() const;
    virtual void setDes_addr(const char * des_addr);

    virtual const char * getNext_hop_addr() const;
    virtual void setNext_hop_addr(const char * next_hop_addr);

    virtual ::omnetpp::simtime_t getGenerate_time() const;
    virtual void setGenerate_time(::omnetpp::simtime_t generate_time);

    virtual ::omnetpp::simtime_t getArriveModule_time() const;
    virtual void setArriveModule_time(::omnetpp::simtime_t arriveModule_time);

    virtual ::omnetpp::simtime_t getLeaveModule_time() const;
    virtual void setLeaveModule_time(::omnetpp::simtime_t leaveModule_time);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Request& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Request& obj) {obj.parsimUnpack(b);}


}  // namespace fattree


namespace omnetpp {

template<> inline fattree::Request *fromAnyPtr(any_ptr ptr) { return check_and_cast<fattree::Request*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __FATTREE_REQUEST_M_H

